"use strict";angular.module("resumeApp").controller("ResumeController",["$scope","$anchorScroll","$http","ArticleService","MessageService","$uibModal","PortfolioService",function(e,t,o,n,i,a,r){function l(){c.currentPage++,r.getPortfolio(c.currentPage,c)}function s(){c.currentPage--,r.getPortfolio(c.currentPage,c)}var c=e.vm={scrollTo:function(e){t(e)},limitPortfolio:6,articles:n.getLastArticles(e),skills:[{title:"HTML",icon:"fa-html5",content:["XHTML","HTML5"]},{title:"CSS3",icon:"fa-css3",content:["LESS","SASS","SCSS"]},{title:"JavaScript",icon:"fa-desktop",content:["ES5","ES6"]},{title:"Libraries",icon:"fa-book",content:["Bootstrap 3","Materialize","UI Bootstrap","jQuery","jQueryUI"]},{title:"Frameworks",icon:"fa-code",content:["AngularJS 1.*","Angular 4.*"]},{title:"Apps & Tools",icon:"fa-cogs",content:["VCS - SVN, GIT","Adobe Photoshop, Adobe Illustartor, Avocode","Netbeans, phpStorm","Gulp, Bower, Yeoman, npm","Bitbucket, Atlassian Jira"]},{title:"Languages",icon:"fa-globe",content:["English - Intermediate","Ukrainian, Russian - Native"]}],name:"",email:"",message:"",sendMsg:function(){i.sendMessage(c.name,c.email,c.message).then(e.open("sm"))["catch"](function(e){}),c.name="",c.email="",c.message=""},currentPage:0,portfolio:"",portfolioNextPage:l,portfolioPrevPage:s,portfolioPageCount:0};r.getPortfolio(c.currentPage,c),r.getPortfolioPageCount(c),e.oneAtATime=!1,e.status={isCustomHeaderOpen:!1,isFirstOpen:!0,isFirstDisabled:!1};var u=!1;window.onscroll=function(){function e(){var e=document.getElementById("skills");if(null!==e){var o=t(e),n=document.documentElement.clientHeight,i=window.pageYOffset,a=document.querySelectorAll(".progress-bar");n+i>o&&(angular.element(document).find(a).addClass("animate"),u=!0)}}function t(e){var t=e.getBoundingClientRect(),o=t.top+pageYOffset;return o}u||e()},e.animationsEnabled=!0,e.open=function(t){a.open({animation:e.animationsEnabled,templateUrl:"modal-window.html",size:t})},e.toggleAnimation=function(){e.animationsEnabled=!e.animationsEnabled}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
